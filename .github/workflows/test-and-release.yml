# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
    tags:
      # normal versions
      - "v?[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v?[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  # Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build Admin Tab
        run: npm run build

#      - name: Perform a type check
#        run: npm run check:ts
#        env:
#          CI: true
      # - name: Lint TypeScript code
      #   run: npm run lint
#      - name: Test package files
#        run: npm run test:package

  # Runs adapter tests on all supported node versions and OSes
  adapter-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Run package tests
        run: node node_modules/mocha/bin/mocha test/testPackageFiles.js --exit

      - name: Run WrapperNoInfo tests
        run: node node_modules/mocha/bin/mocha test/testAdapterWrapperNoInfo.js --exit

      - name: Run WrapperWithInfo tests
        run: node node_modules/mocha/bin/mocha test/testAdapterWrapperWithInfo.js --exit

      - name: Run LocalMode tests (linux/osx)
        if: startsWith(runner.OS, 'windows') == false
        run: |
          rm -rf tmp/node_modules/iobroker.ham/node_modules/homebridge-http-webhooks
          rm -rf tmp/node_modules/iobroker.ham/node_modules/homebridge-sun-position
          node node_modules/mocha/bin/mocha test/testAdapterZLocal.js --exit

      - name: Run LocalMode tests (windows)
        if: startsWith(runner.OS, 'windows')
        run: |
          rm tmp\node_modules\iobroker.ham\node_modules\homebridge-http-webhooks -r -fo
          rm tmp\node_modules\iobroker.ham\node_modules\homebridge-sun-position -r -fo
          node node_modules/mocha/bin/mocha test/testAdapterZLocal.js --exit

      - name: Run GlobalMode tests (linux/osx)
        if: startsWith(runner.OS, 'windows') == false
        run: |
          rm -rf tmp/node_modules/iobroker.ham/node_modules/homebridge-http-webhooks
          rm -rf tmp/node_modules/iobroker.ham/node_modules/homebridge-sun-position
          rm -rf tmp/node_modules/iobroker.ham/node_modules/homebridge
          npm install -g homebridge@1.4.1
          npm install -g homebridge-http-webhooks
          npm install -g homebridge-sun-position
          npm install -g https://git@github.com/Apollon77/homebridge-plugin-template
          export NODE_GLOBAL_DIR=$(npm root -g)
          node node_modules/mocha/bin/mocha test/testAdapterXGlobal.js --exit

      - name: Run GlobalMode tests (windows) Pre-Cleanup
        if: startsWith(runner.OS, 'windows')
        run: |
          rm tmp\node_modules\iobroker.ham\node_modules\homebridge-http-webhooks -r -fo
          rm tmp\node_modules\iobroker.ham\node_modules\homebridge-sun-position -r -fo
          rm tmp\node_modules\iobroker.ham\node_modules\homebridge -r -fo

      - name: Run GlobalMode tests (windows)
        if: startsWith(runner.OS, 'windows')
        shell: cmd
        run: |
          npm install -g homebridge@1.4.1
          npm install -g homebridge-http-webhooks
          npm install -g homebridge-sun-position
          npm install -g https://git@github.com/Apollon77/homebridge-plugin-template
          for /f "delims=" %%A in ('npm root -g') do set "NODE_GLOBAL_DIR=%%A"
          node node_modules/mocha/bin/mocha test/testAdapterXGlobal.js --exit

#      - name: Run unit tests
#        run: npm run test:unit
#      - name: Run integration tests # (linux/osx)
#        if: startsWith(runner.OS, 'windows') == false
#        run: DEBUG=testing:* npm run test:integration
#      - name: Run integration tests # (windows)
#        if: startsWith(runner.OS, 'windows')
#        run: set DEBUG=testing:* & npm run test:integration

  # Deploys the final package to NPM
  deploy:
    needs: [adapter-tests]

    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Extract the version and commit body from the tag
        id: extract_release
        # The body may be multiline, therefore we need to escape some characters
        run: |
          VERSION="${{ github.ref }}"
          VERSION=${VERSION##*/}
          VERSION=${VERSION##*v}
          echo "::set-output name=VERSION::$VERSION"
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Install Dependencies
        run: npm ci

      - name: Install Dependencies
        run: npm run build

#      - name: Create a clean build
#        run: npm run build
      - name: Publish package to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          npm publish

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.extract_release.outputs.VERSION }}
          draft: false
          # Prerelease versions create prereleases on Github
          prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}
